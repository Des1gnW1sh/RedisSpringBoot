<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2012-2016 <a href="https://www.scnjwh.com">内江五环科技</a> All rights reserved.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.scnjwh.intellectreport.common.beanvalidator.BeanValidators;
import com.scnjwh.intellectreport.common.config.Global;
import com.scnjwh.intellectreport.common.json.AjaxJson;
import com.scnjwh.intellectreport.common.persistence.Page;
import com.scnjwh.intellectreport.common.utils.DateUtils;
import com.scnjwh.intellectreport.common.utils.StringUtils;
import com.scnjwh.intellectreport.common.utils.excel.ExportExcel;
import com.scnjwh.intellectreport.common.utils.excel.ImportExcel;
import com.scnjwh.intellectreport.common.web.BaseController;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends BaseController {

	@Autowired
	private ${ClassName}Service ${className}Service;
	
	@ModelAttribute
	public ${ClassName} get(@RequestParam(required=false) String id) {
		${ClassName} entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = ${className}Service.get(id);
		}
		if (entity == null){
			entity = new ${ClassName}();
		}
		return entity;
	}
	
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"list", ""})
	public String list(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		List<${ClassName}> list = ${className}Service.findList(${className}); 
		model.addAttribute("list", list);
		return "${lastPackageName}/${viewPrefix}List";
	}

	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = "form")
	public String form(${ClassName} ${className}, Model model) {
		if (${className}.getParent()!=null && StringUtils.isNotBlank(${className}.getParent().getId())){
			${className}.setParent(${className}Service.get(${className}.getParent().getId()));
			// 获取排序号，最末节点排序号+30
			if (StringUtils.isBlank(${className}.getId())){
				${ClassName} ${className}Child = new ${ClassName}();
				${className}Child.setParent(new ${ClassName}(${className}.getParent().getId()));
				List<${ClassName}> list = ${className}Service.findList(${className}); 
				if (list.size() > 0){
					${className}.setSort(list.get(list.size()-1).getSort());
					if (${className}.getSort() != null){
						${className}.setSort(${className}.getSort() + 30);
					}
				}
			}
		}
		if (${className}.getSort() == null){
			${className}.setSort(30);
		}
		model.addAttribute("${className}", ${className});
		return "${lastPackageName}/${viewPrefix}Form";
	}
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = "formView")
	public String formView(${ClassName} ${className}, Model model) {
		if (${className}.getParent()!=null && StringUtils.isNotBlank(${className}.getParent().getId())){
			${className}.setParent(${className}Service.get(${className}.getParent().getId()));
			// 获取排序号，最末节点排序号+30
			if (StringUtils.isBlank(${className}.getId())){
				${ClassName} ${className}Child = new ${ClassName}();
				${className}Child.setParent(new ${ClassName}(${className}.getParent().getId()));
				List<${ClassName}> list = ${className}Service.findList(${className}); 
				if (list.size() > 0){
					${className}.setSort(list.get(list.size()-1).getSort());
					if (${className}.getSort() != null){
						${className}.setSort(${className}.getSort() + 30);
					}
				}
			}
		}
		if (${className}.getSort() == null){
			${className}.setSort(30);
		}
		model.addAttribute("${className}", ${className});
		return "${lastPackageName}/${viewPrefix}View";
	}

	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "save")
	@ResponseBody
	public String save(${ClassName} ${className}, Model model,HttpServletResponse response) {
		if (!beanValidator(model, ${className})) {
			return renderString(response,new AjaxJson().setMsg(model.asMap().get("message").toString()).setSuccess(false));
		}
		return renderString(response, new AjaxJson().setMsg(${className}Service.saveOfCheck(${className})));
	}
	
	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "delete")
	public String delete(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.delete(${className});
		addMessage(redirectAttributes, "删除${functionNameSimple}成功");
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	}

	@RequiresPermissions("user")
	@ResponseBody
	@RequestMapping(value = "treeData")
	public List<Map<String, Object>> treeData(@RequestParam(required=false) String extId, HttpServletResponse response) {
		List<Map<String, Object>> mapList = Lists.newArrayList();
		List<${ClassName}> list = ${className}Service.findList(new ${ClassName}());
		for (int i=0; i<list.size(); i++){
			${ClassName} e = list.get(i);
			if (StringUtils.isBlank(extId) || (extId!=null && !extId.equals(e.getId()) && e.getParentIds().indexOf(","+extId+",")==-1)){
				Map<String, Object> map = Maps.newHashMap();
				map.put("id", e.getId());
				map.put("pId", e.getParentId());
				map.put("name", e.getName());
				mapList.add(map);
			}
		}
		return mapList;
	}
	
	/**
	 * 导出数据
	 * 导入导出需要给实体类字段配置注解 
	 * 例：@ExcelField(title="父级编码", align=2, sort=11,value="parent.code")
	 * @param user
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequestMapping(value = "export", method = RequestMethod.POST)
	public String exportFile(${ClassName} ${className}, HttpServletRequest request,HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String fileName = "${functionNameSimple}数据" + DateUtils.getDate("yyyyMMddHHmmss")+ ".xlsx";
			Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response, -1), ${className});
			new ExportExcel("${functionNameSimple}数据", ${ClassName}.class).setDataList(page.getList()).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出${functionNameSimple}失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/${viewPrefix}/?repage";
	}
	/**
	 * 下载导入数据模板
	 * 导入导出需要给实体类字段配置注解 
	 * 例：@ExcelField(title="父级编码", align=2, sort=11,value="parent.code")
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequestMapping(value = "import/template")
	public String importFileTemplate(HttpServletResponse response,RedirectAttributes redirectAttributes) {
		try {
			String fileName = "${functionNameSimple}数据导入模板.xlsx";
			List<${ClassName}> list = Lists.newArrayList();
			//插入演示数据
			new ExportExcel("${functionNameSimple}数据模板", ${ClassName}.class, 2).setDataList(list).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入模板下载失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/${viewPrefix}/?repage";
	}
	
	/**
	 * 导入单位数据
	 * 导入导出需要给实体类字段配置注解 
	 * 例：@ExcelField(title="父级编码", align=2, sort=11,value="parent.code")
	 * @param file
	 * @param redirectAttributes
	 * @return
	 */
	@RequestMapping(value = "import", method = RequestMethod.POST)
	public String importFile(MultipartFile file,RedirectAttributes redirectAttributes) {
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<${ClassName}> list = ei.getDataList(${ClassName}.class);
			for (${ClassName} ${className} : list) {
				try {
//					BeanValidators.validateWithException(validator, ${className});
//					orgs.setFiscalType(fiscalService.getByName(orgs.getFiscalType().getName()));
//	orgs.getFiscalType().getName() 获取对应name值需要添加template对应的类 保存父级使用code值或者id值直接保存，无法根据name或其他值查询
					${className}Service.save(${className});
					successNum++;
				} catch (ConstraintViolationException ex) {
					failureMsg.append("<br/>" + ${className}.getName() + " 导入失败：");
					List<String> messageList = BeanValidators.extractPropertyAndMessageAsList(ex, ": ");
					for (String message : messageList) {
						failureMsg.append(message + "; ");
						failureNum++;
					}
				} catch (Exception ex) {
					failureMsg.append("<br/>" + ${className}.getName() + " 导入失败："+ ex.getMessage());
					failureNum++;
				}
			}
			if (failureNum > 0) {
				failureMsg.insert(0, "，失败 " + failureNum + " 条，导入信息如下：");
				addMessage(redirectAttributes, "导入失败！失败信息：" + failureMsg);
			}else{
				addMessage(redirectAttributes, "已成功导入 " + successNum + " 条数据"+ failureMsg);
			}
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/${viewPrefix}/?repage";
	}
	
}]]>
	</content>
</template>